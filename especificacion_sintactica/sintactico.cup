package compilador;
import java_cup.runtime.*;
import ast.*;
action code {:
private boolean modoDepuracion=false;
private NodoBase ast=null;
private int lineanum=0;
//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
public NodoBase getASTroot(){
return ast;
}
:}
/* Simbolos Terminales */
terminal IF;
terminal THEN;
terminal ELSE;
terminal BEGIN;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal RETURN;
terminal String ID;
terminal Integer NUM;
terminal Integer REAL;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal RT;
terminal MENEQ;
terminal MAYEQ;
terminal DIF;
terminal AND;
terminal OR;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal COMA;
terminal BOOLEAN;
terminal INT;
terminal VOID;
terminal FOR;
terminal SEMI;
//terminal LCOR;
//terminal RCOR;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;


non terminal NodoBase for_stmt;
non terminal NodoBase funciones;
non terminal NodoBase funcion;
non terminal NodoBase args;
non terminal NodoBase arg;
non terminal NodoBase bloque;
non terminal NodoBase data_type;
non terminal NodoBase another_type;
non terminal NodoBase call_func;
non terminal NodoBase return_stmt;

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;

precedence left AND;
precedence left OR;

/* REGLAS GRAMATICALES */
program ::= funciones:fun bloque:blo 
;
funciones ::= funciones:fn funcion:f 
            |funcion:fn          
;
bloque ::= BEGIN stmt_seq:stmt END 
;
funcion ::= another_type:at ID:variable LPAREN args:argumento RPAREN bloque:cuerpo 
;
another_type ::= VOID 
             
            | data_type:dt 

;
data_type ::= INT 
            | BOOLEAN 

;

args ::= args:argumentos COMA arg:argumento 

            | arg:argumento                   
;

arg ::=  data_type:dt ID:variable  
            |  ID:variable        
;
stmt_seq ::= stmt_seq:ini SEMI stmt:sent 
            | stmt:sent 
;
stmt ::= if_stmt:sif 
            | repeat_stmt:srep 
            | assign_stmt:sasi 
            | read_stmt:slec 
            | write_stmt:sesc 
            | for_stmt:fr
            | return_stmt:re	
            | call_func:call
            | error 
;
if_stmt ::= IF exp:ex THEN stmt_seq:pthen END 
            | IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END 
;
repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba 
;
assign_stmt ::= ID:variable ASSIGN exp:ex 
;
read_stmt ::= READ ID:variable 
;
write_stmt ::= WRITE exp:ex 
;

for_stmt ::= FOR LPAREN assign_stmt:inici SEMI exp:com SEMI assign_stmt:paso RPAREN stmt_seq:cuerpo END 
;
return_stmt ::= RETURN ID:variable SEMI 
;

call_func ::= ID:variable LPAREN args:argumentos RPAREN SEMI 
                | assign_stmt LPAREN args:argumentos RPAREN SEMI 
;
exp  ::= simple_exp:exI OR simple_exp:exD	
                | simple_exp:exI AND simple_exp:exD	  
                | simple_exp:exI RT simple_exp:exD	  
                | simple_exp:exI LT simple_exp:exD	
		| simple_exp:exI EQ simple_exp:exD
		| simple_exp:exI MENEQ simple_exp:exD	
                | simple_exp:exI MAYEQ simple_exp:exD	

		| simple_exp:exI	DIF simple_exp:exD  
		| simple_exp:ex                         
		;
simple_exp ::= simple_exp:exI PLUS term:exD 
            | simple_exp:exI MINUS term:exD 
            | term:ex 
;
term ::= term:exI TIMES factor:exD 
            | term:exI OVER factor:exD 
            | factor:fac 
;
factor ::= LPAREN exp:ex RPAREN 
            | NUM:valor
            | REAL:valor 
            | ID:variable 
            | error 
;