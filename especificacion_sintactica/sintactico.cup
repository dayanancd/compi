package compilador;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

/* Simbolos Terminales */
terminal IF;
terminal THEN;
terminal ELSE;
terminal BEGIN;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal RETURN;
terminal String ID;
terminal Integer NUM;
terminal Integer REAL;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal RT;
terminal MENEQ;
terminal MAYEQ;
terminal DIF;
terminal AND;
terminal OR;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal COMA;
terminal BOOLEAN;
terminal INT;
terminal VOID;
terminal FOR;
terminal SEMI;
terminal LCOR;
terminal RCOR;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;

non terminal NodoBase program_full;
non terminal NodoBase for_stmt;
non terminal NodoBase funciones;
non terminal NodoBase funcion;
non terminal NodoBase args;
non terminal NodoBase arg;
non terminal NodoBase bloque;
non terminal NodoBase data_type;
non terminal NodoBase another_type;
non terminal NodoBase call_func;
non terminal NodoBase return_stmt; 

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;


precedence left AND;
precedence left OR;


/* REGLAS GRAMATICALES */
program     ::= program_full:s	{: /*if(modoDepuracion) System.out.println("\t regla 1"); 
					ast = s;
					*/:}
		;

program_full ::= funciones:fun bloque:blo    {:// if(modoDepuracion) System.out.println("\t regla 2"); 
						//NodoBase hijoActual = fun;
						//if(hijoActual !=null){
						//	while(hijoActual.TieneHermano()){
						//		hijoActual = hijoActual.getHermanoDerecha();
						//	}
						//	hijoActual.setHermanoDerecha(blo);
						//	RESULT=fun;
					//	}else{
					//		RESULT=blo;
					//	}
					     :}

;

funciones ::= funciones:fn funcion:f {:/* if(modoDepuracion) System.out.println("\t regla 3a");
                                        NodoBase hijoActual = fn;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=fn;
						}else{
							RESULT=f;
						}
*/
                                    :}
            |funcion:fn           {:/* if(modoDepuracion) System.out.println("\t regla 3b"); 
						RESULT=fn;
                                    */ :}
;
bloque ::= BEGIN stmt_seq:stmt END {: // if(modoDepuracion) System.out.println("\t regla 5");  
                                       // RESULT = stmt;
                                  :}
;
funcion ::= another_type:at ID:variable LPAREN args:argumento RPAREN bloque:cuerpo {:// if(modoDepuracion) System.out.println("\t regla 4");
                                                                                //RESULT = new NodoFuncion(variable,argumento,cuerpo);
                                                                            :}
;
another_type ::= VOID {: // if(modoDepuracion) System.out.println("\t regla 8a"); 
                                
                      :}
             
            | data_type:dt {: //if(modoDepuracion) System.out.println("\t regla 8b");
                            :}

;
data_type ::= INT {:// if(modoDepuracion) System.out.println("\t regla 9a"); 
                  :}
            | BOOLEAN {: //if(modoDepuracion) System.out.println("\t regla 9b"); 
                       :}

;

args ::= args:argumentos COMA arg:argumento {:// if(modoDepuracion) System.out.println("\t regla 6a");
                                                //NodoBase hijoActual = argumentos;
						//if(hijoActual !=null){
						//	while(hijoActual.TieneHermano()){
						//		hijoActual = hijoActual.getHermanoDerecha();
						//	}
						//	hijoActual.setHermanoDerecha(sent);
						//	RESULT=argumentos;
						//}else{
						//	RESULT=argumento;
						//}
                                            :}

         | arg:argumento                    {: // if(modoDepuracion) System.out.println("\t regla 6b");  
                                                 //  RESULT = argumento;
                                            :}
;

arg ::=  data_type:dt ID:variable  {: //if(modoDepuracion) System.out.println("\t regla 7a");  
                                        //RESULT = new NodoIdentificador(variable);
                                    :}
            |  ID:variable        {:  //if(modoDepuracion) System.out.println("\t regla 7b"); 
                                       // RESULT = new NodoIdentificador(variable);
                                  :} 
;


stmt_seq    ::= stmt_seq:ini SEMI stmt:sent	{:// if(modoDepuracion) System.out.println("\t regla 10a: Sentencia de secuencia, sentencias"); 
                                                   //NodoBase hijoActual = ini;
                                                   //if(hijoActual !=null){
						//	while(hijoActual.TieneHermano()){
						//		hijoActual = hijoActual.getHermanoDerecha();
						//	}
						//	hijoActual.setHermanoDerecha(sent);
						//	RESULT=ini;
                                                  // }else{
						//	RESULT=sent;
                                                 //  }
						:}
                    | stmt:sent                 {:// if(modoDepuracion) System.out.println("\t regla 10b: Sentencias"); 
                                                   //RESULT=sent;				
                                                :}
;
stmt        ::= if_stmt:sif	{: //if(modoDepuracion) System.out.println("\t regla 11a"); 
				//	RESULT=sif;
					:}
            | repeat_stmt:srep	{:// if(modoDepuracion) System.out.println("\t regla 11b"); 
				//		RESULT=srep;
						:}
            | assign_stmt:sasi	{: //if(modoDepuracion) System.out.println("\t regla 11c"); 
				//		RESULT=sasi;
						:}
            | read_stmt:slec	{:// if(modoDepuracion) System.out.println("\t regla 11d"); 
				//	RESULT=slec;
					:}
            | write_stmt:sesc	{: //if(modoDepuracion) System.out.println("\t regla 11e"); 
				//	RESULT=sesc;
					:}
            | for_stmt:for	{: //if(modoDepuracion) System.out.println("\t regla 11f"); 
                                       // RESULT=for;
					:}
            | return_stmt:re	{: //if(modoDepuracion) System.out.println("\t regla 11g"); 
                                  //      RESULT=re;
					:}
            | call_func:call	{: //if(modoDepuracion) System.out.println("\t regla 11h"); 
                                  //      RESULT=call;
					:}
            | error	{: //if(modoDepuracion) System.out.println("\t regla 3f"); 
				//System.out.println("Ocurrio error en cup # 0004");
				//RESULT=null;
				:}
            ;

if_stmt     ::= IF exp:ex THEN stmt_seq:pthen END	{: //if(modoDepuracion) System.out.println("\t regla 12a"); 
		//RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: //if(modoDepuracion) System.out.println("\t regla 12b"); 
		//RESULT = new NodoIf(ex,pthen,pelse);		
		:}
		;

repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{:// if(modoDepuracion) System.out.println("\t regla 13"); 
							//RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;

assign_stmt ::= ID:variable 	{: //if(modoDepuracion) System.out.println("\t regla 14a parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				:}
			ASSIGN exp:ex	{:// if(modoDepuracion) System.out.println("\t regla 14b parte final");
					//if(variable!=null)
					//RESULT = new NodoAsignacion(variable.toString(),ex);
					//else{
					//RESULT = null;
					//System.out.println("Ocurrio error en cup # 0001");
					//}
					:}

                | ID:vector LCOR NUM:tam RCOR ASSIGN exp:ex {: //if(modoDepuracion) System.out.println("\t regla 14c");
                                                                  // if(vector!=null)
                                                                    //     RESULT = new NodoAsignacion(vector.toString(),tam,ex);
                                                                   //else{
                                                                    //        RESULT = null;
                                                                     //   System.out.println("Ocurrio error en asignacion a vector...");
                                                                      //  }
                                                                :}
;

read_stmt   ::= READ ID:variable	{: //if(modoDepuracion) System.out.println("\t regla 15"); 
					//System.out.println("Leyendo Variable");
					//if(variable!=null)
					//RESULT = new NodoLeer(variable.toString());
					//else{
					//RESULT = null;
					//System.out.println("Ocurrio error en cup # 0002");
					//}
					:}
		;

write_stmt  ::= WRITE exp:ex	{: //if(modoDepuracion) System.out.println("\t regla 16"); 
					//RESULT= new NodoEscribir(ex);
					:}
		;


for_stmt ::= FOR LPAREN assign_stmt:inici SEMI exp:com SEMI assign_stmt:paso RPAREN stmt_seq:cuerpo END {: //if(modoDepuracion) System.out.println("\t regla 17: Ciclo FOR"); 
                                                                                                          //RESULT = new NodoFor(inici,com,paso,cuerpo);
                                                                                                       :}
;
return_stmt ::= RETURN ID:variable SEMI {:// if(modoDepuracion) System.out.println("\t regla 18"); 
                                           // RESULT = new NodoReturn(variable);
                                        :}
;

call_func ::= ID:variable LPAREN args:argumentos RPAREN SEMI {://if(modoDepuracion) System.out.println("\t regla 19a"); 
                                                   // RESULT = new NodoCallFunc(variable,argumentos);
                                                  :}
                | assign_stmt LPAREN args:argumentos RPAREN SEMI {: //if(modoDepuracion) System.out.println("\t regla 19b");  
                                                                                // RESULT = new NodoCallFunc(argumentos);
                                                                                :}
;

exp         ::= simple_exp:exI OR simple_exp:exD	{: //if(modoDepuracion) System.out.println("\t regla 23a"); 
								//RESULT = new NodoOperacion(exI,tipoOp.or,exD);
								:}  
                | simple_exp:exI AND simple_exp:exD	{: //if(modoDepuracion) System.out.println("\t regla 23a"); 
								//RESULT = new NodoOperacion(exI,tipoOp.and,exD);
                                                        :}  
                | simple_exp:exI RT simple_exp:exD	{: //if(modoDepuracion) System.out.println("\t regla 23a"); 
								//RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
								:}  
                | simple_exp:exI LT simple_exp:exD	{: //if(modoDepuracion) System.out.println("\t regla 23a"); 
								//RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 
		| simple_exp:exI EQ simple_exp:exD	{: //if(modoDepuracion) System.out.println("\t regla 23b"); 
                                                             //   RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}

		| simple_exp:ex MENEQ simple_exp:exD	{: //if(modoDepuracion) System.out.println("\t regla 23c"); 
                                                           //RESULT = new NodoOperacion(ex,tipoOp.menor_igual,exD);

                                                        :}
                | simple_exp:exI MAYEQ simple_exp:exD	{: //if(modoDepuracion) System.out.println("\t regla 23d"); 
							//RESULT = new NodoOperacion(exI,tipoOp.mayor_igual,exD);
							:}

		| simple_exp:ex	DIF simple_exp:exD      {: //if(modoDepuracion) System.out.println("\t regla 23d"); 
                                                        //RESULT = new NodoOperacion(ex,tipoOp.diferent,exD);
                                                        :}
		| simple_exp:ex                         {: //if(modoDepuracion) System.out.println("\t regla 23e"); 
                                                        //RESULT = ex;
                                                        :}

		;

simple_exp  ::= simple_exp:exI PLUS term:exD	{: //if(modoDepuracion) System.out.println("\t regla 24a"); 
							//RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: //if(modoDepuracion) System.out.println("\t regla 24b"); 
							//RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: //if(modoDepuracion) System.out.println("\t regla 24c"); 
				//RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: //if(modoDepuracion) System.out.println("\t regla 25a"); 
							//RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: //if(modoDepuracion) System.out.println("\t regla 25b"); 
						//RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| factor:ex	{: //if(modoDepuracion) System.out.println("\t regla 25c"); 
					//RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: //if(modoDepuracion) System.out.println("\t regla 26a"); 
						//	RESULT = ex;
							:}
		| REAL:valor	{: //if(modoDepuracion) System.out.println("\t regla 26b"); 
					//System.out.println("Devolvi nodo numero entero");
					//if(valor!=null){
					//	RESULT= new NodoValor(valor);					
					//}else{
					//	RESULT = null;
					//	System.out.println("Ocurrio error en cup # 0005");
					//}
					:}
		| ID:variable	{: //if(modoDepuracion) System.out.println("\t regla 26c"); 
					//if(variable!=null){
					//	System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
					//	RESULT= new NodoIdentificador(variable.toString());		
					//}else{
					//	RESULT = null;
					//	System.out.println("Ocurrio error en cup # 0005");
					//}
					:}
                | ID:vector LCOR simple_exp:indice RCOR {: //if(modoDepuracion) System.out.println("\t vector como expresion... regla 26d");
                                                            //if(vector!=null){
                                                              //  System.out.println("Generar nodo para vector como expresion:"+ vector.toString());
                                                            //    RESULT= new NodoIdentificador(vector.toString(),indice);
                                                            //}else{
                                                              //  RESULT = null;
                                                               // System.out.println("Ocurrio error en vector como expresion...");
                                                            //}
                                                        :}
		| error	{: //if(modoDepuracion) System.out.println("\t regla 26e"); 
				//System.out.println("Ocurrio error en cup # 0003");
				//RESULT=null;
				:}
		;