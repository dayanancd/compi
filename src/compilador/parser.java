
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 15 11:10:52 VET 2015
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 15 11:10:52 VET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\003\000\002\002\004\000\002\016" +
    "\004\000\002\020\004\000\002\020\003\000\002\024\005" +
    "\000\002\021\010\000\002\026\003\000\002\026\003\000" +
    "\002\025\003\000\002\025\003\000\002\022\005\000\002" +
    "\022\003\000\002\023\004\000\002\023\003\000\002\003" +
    "\005\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\007\000\002\005\011\000\002\006" +
    "\006\000\002\031\002\000\002\007\006\000\002\007\010" +
    "\000\002\010\004\000\002\011\004\000\002\017\014\000" +
    "\002\030\005\000\002\027\007\000\002\027\007\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\006\000\002\015\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\010\041\007\042\004\043\011\001\002\000" +
    "\004\016\ufff8\001\002\000\012\007\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\001\002\000\004\002\001\001\002\000\004\016" +
    "\ufff7\001\002\000\004\016\170\001\002\000\004\016\ufffa" +
    "\001\002\000\004\002\167\001\002\000\012\007\015\041" +
    "\007\042\004\043\011\001\002\000\004\016\ufff9\001\002" +
    "\000\022\003\032\004\025\011\037\013\021\014\026\015" +
    "\023\016\027\044\036\001\002\000\012\007\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\001\002\000\004\002\uffff\001\002\000" +
    "\012\006\uffef\010\uffef\012\uffef\045\uffef\001\002\000\004" +
    "\016\166\001\002\000\012\006\uffe9\010\uffe9\012\uffe9\045" +
    "\uffe9\001\002\000\004\016\164\001\002\000\012\006\uffed" +
    "\010\uffed\012\uffed\045\uffed\001\002\000\012\003\060\016" +
    "\057\020\061\036\065\001\002\000\012\003\060\016\057" +
    "\020\061\036\065\001\002\000\010\021\uffe4\036\150\046" +
    "\140\001\002\000\012\006\uffea\010\uffea\012\uffea\045\uffea" +
    "\001\002\000\006\010\147\045\055\001\002\000\012\006" +
    "\uffe8\010\uffe8\012\uffe8\045\uffe8\001\002\000\012\006\ufff0" +
    "\010\ufff0\012\ufff0\045\ufff0\001\002\000\012\006\uffeb\010" +
    "\uffeb\012\uffeb\045\uffeb\001\002\000\012\006\uffec\010\uffec" +
    "\012\uffec\045\uffec\001\002\000\004\036\125\001\002\000" +
    "\022\003\032\004\025\011\037\013\021\014\026\015\023" +
    "\016\027\044\036\001\002\000\014\006\uffee\010\uffee\012" +
    "\uffee\036\042\045\uffee\001\002\000\012\006\ufff1\010\ufff1" +
    "\012\ufff1\045\ufff1\001\002\000\010\016\043\041\007\042" +
    "\004\001\002\000\006\037\ufff3\040\ufff3\001\002\000\006" +
    "\037\ufff5\040\ufff5\001\002\000\006\037\051\040\050\001" +
    "\002\000\004\016\047\001\002\000\006\037\ufff4\040\ufff4" +
    "\001\002\000\010\016\043\041\007\042\004\001\002\000" +
    "\004\045\052\001\002\000\012\006\uffdc\010\uffdc\012\uffdc" +
    "\045\uffdc\001\002\000\006\037\ufff6\040\ufff6\001\002\000" +
    "\006\012\056\045\055\001\002\000\022\003\032\004\025" +
    "\011\037\013\021\014\026\015\023\016\027\044\036\001" +
    "\002\000\012\003\060\016\057\020\061\036\065\001\002" +
    "\000\054\005\uffca\006\uffca\010\uffca\012\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\045" +
    "\uffca\046\121\047\uffca\001\002\000\052\005\uffc8\006\uffc8" +
    "\010\uffc8\012\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\045\uffc8\047\uffc8\001\002\000" +
    "\052\005\uffcb\006\uffcb\010\uffcb\012\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\045\uffcb" +
    "\047\uffcb\001\002\000\052\005\uffd0\006\uffd0\010\uffd0\012" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\112\035\111\036" +
    "\uffd0\037\uffd0\045\uffd0\047\uffd0\001\002\000\052\005\uffcd" +
    "\006\uffcd\010\uffcd\012\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\045\uffcd\047\uffcd\001" +
    "\002\000\044\005\uffd3\006\uffd3\010\uffd3\012\uffd3\022\076" +
    "\023\101\024\100\025\077\026\073\027\074\030\072\031" +
    "\102\032\075\033\071\036\uffd3\037\uffd3\045\uffd3\001\002" +
    "\000\012\003\060\016\057\020\061\036\065\001\002\000" +
    "\012\006\uffe5\010\uffe5\012\uffe5\045\uffe5\001\002\000\004" +
    "\037\070\001\002\000\052\005\uffcc\006\uffcc\010\uffcc\012" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\045\uffcc\047\uffcc\001\002\000\012\003\060" +
    "\016\057\020\061\036\065\001\002\000\012\003\060\016" +
    "\057\020\061\036\065\001\002\000\012\003\060\016\057" +
    "\020\061\036\065\001\002\000\012\003\060\016\057\020" +
    "\061\036\065\001\002\000\012\003\060\016\057\020\061" +
    "\036\065\001\002\000\012\003\060\016\057\020\061\036" +
    "\065\001\002\000\012\003\060\016\057\020\061\036\065" +
    "\001\002\000\012\003\060\016\057\020\061\036\065\001" +
    "\002\000\012\003\060\016\057\020\061\036\065\001\002" +
    "\000\012\003\060\016\057\020\061\036\065\001\002\000" +
    "\024\005\uffdb\006\uffdb\010\uffdb\012\uffdb\032\075\033\071" +
    "\036\uffdb\037\uffdb\045\uffdb\001\002\000\024\005\uffd8\006" +
    "\uffd8\010\uffd8\012\uffd8\032\075\033\071\036\uffd8\037\uffd8" +
    "\045\uffd8\001\002\000\024\005\uffd9\006\uffd9\010\uffd9\012" +
    "\uffd9\032\075\033\071\036\uffd9\037\uffd9\045\uffd9\001\002" +
    "\000\024\005\uffd6\006\uffd6\010\uffd6\012\uffd6\032\075\033" +
    "\071\036\uffd6\037\uffd6\045\uffd6\001\002\000\024\005\uffd7" +
    "\006\uffd7\010\uffd7\012\uffd7\032\075\033\071\036\uffd7\037" +
    "\uffd7\045\uffd7\001\002\000\052\005\uffd2\006\uffd2\010\uffd2" +
    "\012\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\112\035\111" +
    "\036\uffd2\037\uffd2\045\uffd2\047\uffd2\001\002\000\012\003" +
    "\060\016\057\020\061\036\065\001\002\000\012\003\060" +
    "\016\057\020\061\036\065\001\002\000\052\005\uffcf\006" +
    "\uffcf\010\uffcf\012\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\045\uffcf\047\uffcf\001\002" +
    "\000\052\005\uffce\006\uffce\010\uffce\012\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\045" +
    "\uffce\047\uffce\001\002\000\024\005\uffd4\006\uffd4\010\uffd4" +
    "\012\uffd4\032\075\033\071\036\uffd4\037\uffd4\045\uffd4\001" +
    "\002\000\024\005\uffd5\006\uffd5\010\uffd5\012\uffd5\032\075" +
    "\033\071\036\uffd5\037\uffd5\045\uffd5\001\002\000\024\005" +
    "\uffda\006\uffda\010\uffda\012\uffda\032\075\033\071\036\uffda" +
    "\037\uffda\045\uffda\001\002\000\052\005\uffd1\006\uffd1\010" +
    "\uffd1\012\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\112\035" +
    "\111\036\uffd1\037\uffd1\045\uffd1\047\uffd1\001\002\000\012" +
    "\003\060\016\057\020\061\036\065\001\002\000\010\032" +
    "\075\033\071\047\123\001\002\000\052\005\uffc9\006\uffc9" +
    "\010\uffc9\012\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\045\uffc9\047\uffc9\001\002\000" +
    "\012\006\ufff2\010\ufff2\012\ufff2\045\ufff2\001\002\000\004" +
    "\016\126\001\002\000\006\021\uffe4\046\140\001\002\000" +
    "\004\045\130\001\002\000\012\003\060\016\057\020\061" +
    "\036\065\001\002\000\004\045\132\001\002\000\004\016" +
    "\126\001\002\000\004\037\134\001\002\000\022\003\032" +
    "\004\025\011\037\013\021\014\026\015\023\016\027\044" +
    "\036\001\002\000\006\010\136\045\055\001\002\000\012" +
    "\006\uffdf\010\uffdf\012\uffdf\045\uffdf\001\002\000\004\021" +
    "\145\001\002\000\004\017\141\001\002\000\004\047\142" +
    "\001\002\000\004\021\143\001\002\000\012\003\060\016" +
    "\057\020\061\036\065\001\002\000\016\006\uffe2\010\uffe2" +
    "\012\uffe2\036\uffe2\037\uffe2\045\uffe2\001\002\000\012\003" +
    "\060\016\057\020\061\036\065\001\002\000\016\006\uffe3" +
    "\010\uffe3\012\uffe3\036\uffe3\037\uffe3\045\uffe3\001\002\000" +
    "\014\002\ufffc\007\ufffc\041\ufffc\042\ufffc\043\ufffc\001\002" +
    "\000\010\016\043\041\007\042\004\001\002\000\006\037" +
    "\152\040\050\001\002\000\004\045\153\001\002\000\012" +
    "\006\uffdd\010\uffdd\012\uffdd\045\uffdd\001\002\000\012\006" +
    "\uffe0\010\uffe0\012\uffe0\045\uffe0\001\002\000\004\005\156" +
    "\001\002\000\022\003\032\004\025\011\037\013\021\014" +
    "\026\015\023\016\027\044\036\001\002\000\010\006\160" +
    "\010\161\045\055\001\002\000\022\003\032\004\025\011" +
    "\037\013\021\014\026\015\023\016\027\044\036\001\002" +
    "\000\012\006\uffe7\010\uffe7\012\uffe7\045\uffe7\001\002\000" +
    "\006\010\163\045\055\001\002\000\012\006\uffe6\010\uffe6" +
    "\012\uffe6\045\uffe6\001\002\000\004\045\165\001\002\000" +
    "\012\006\uffde\010\uffde\012\uffde\045\uffde\001\002\000\012" +
    "\006\uffe1\010\uffe1\012\uffe1\045\uffe1\001\002\000\004\002" +
    "\000\001\002\000\004\036\171\001\002\000\010\016\043" +
    "\041\007\042\004\001\002\000\006\037\173\040\050\001" +
    "\002\000\004\007\015\001\002\000\012\007\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\016\002\011\016\005\020\012\021\004\025" +
    "\013\026\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\015\024\016" +
    "\025\013\026\007\001\001\000\002\001\001\000\026\003" +
    "\030\004\040\005\032\006\017\007\037\010\023\011\034" +
    "\017\033\027\021\030\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\154\013\063\014\061\015\062\001\001\000\012\012\153" +
    "\013\063\014\061\015\062\001\001\000\004\031\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\053\004\040\005\032\006\017" +
    "\007\037\010\023\011\034\017\033\027\021\030\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\044" +
    "\023\043\025\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\052\025\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\123\005\032\006\017\007\037\010\023\011\034\017" +
    "\033\027\021\030\027\001\001\000\012\012\065\013\063" +
    "\014\061\015\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\066\013\063\014\061\015" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\117\015\062\001\001\000\010\013" +
    "\116\014\061\015\062\001\001\000\010\013\115\014\061" +
    "\015\062\001\001\000\010\013\114\014\061\015\062\001" +
    "\001\000\006\014\107\015\062\001\001\000\010\013\106" +
    "\014\061\015\062\001\001\000\010\013\105\014\061\015" +
    "\062\001\001\000\010\013\104\014\061\015\062\001\001" +
    "\000\010\013\103\014\061\015\062\001\001\000\010\013" +
    "\102\014\061\015\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\113\001\001\000\004" +
    "\015\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\121\014\061\015\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\126\001\001\000\004\031\136\001\001\000\002\001" +
    "\001\000\012\012\130\013\063\014\061\015\062\001\001" +
    "\000\002\001\001\000\004\007\132\001\001\000\002\001" +
    "\001\000\026\003\134\004\040\005\032\006\017\007\037" +
    "\010\023\011\034\017\033\027\021\030\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\143\013\063\014\061\015\062\001\001\000\002\001\001" +
    "\000\012\012\145\013\063\014\061\015\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\150\023\043" +
    "\025\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\156\004\040\005\032\006\017\007\037\010\023\011" +
    "\034\017\033\027\021\030\027\001\001\000\002\001\001" +
    "\000\026\003\161\004\040\005\032\006\017\007\037\010" +
    "\023\011\034\017\033\027\021\030\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\171\023\043\025\045\001" +
    "\001\000\002\001\001\000\004\024\173\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= error 
            {
              NodoBase RESULT =null;
		 //if(modoDepuracion) System.out.println("\t regla 26e"); 
				//System.out.println("Ocurrio error en cup # 0003");
				//RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= ID LCOR simple_exp RCOR 
            {
              NodoBase RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vector = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase indice = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //if(modoDepuracion) System.out.println("\t vector como expresion... regla 26d");
                                                            //if(vector!=null){
                                                              //  System.out.println("Generar nodo para vector como expresion:"+ vector.toString());
                                                            //    RESULT= new NodoIdentificador(vector.toString(),indice);
                                                            //}else{
                                                              //  RESULT = null;
                                                               // System.out.println("Ocurrio error en vector como expresion...");
                                                            //}
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 26c"); 
					//if(variable!=null){
					//	System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
					//	RESULT= new NodoIdentificador(variable.toString());		
					//}else{
					//	RESULT = null;
					//	System.out.println("Ocurrio error en cup # 0005");
					//}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= REAL 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 26b"); 
					//System.out.println("Devolvi nodo numero entero");
					//if(valor!=null){
					//	RESULT= new NodoValor(valor);					
					//}else{
					//	RESULT = null;
					//	System.out.println("Ocurrio error en cup # 0005");
					//}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //if(modoDepuracion) System.out.println("\t regla 26a"); 
						//	RESULT = ex;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 25c"); 
					//RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 25b"); 
						//RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 25a"); 
							//RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 24c"); 
				//RESULT=ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 24b"); 
							//RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 24a"); 
							//RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 23e"); 
                                                        //RESULT = ex;
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= simple_exp DIF simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 23d"); 
                                                        //RESULT = new NodoOperacion(exI,tipoOp.diferent,exD);
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= simple_exp MAYEQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 23d"); 
							//RESULT = new NodoOperacion(exI,tipoOp.mayor_igual,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= simple_exp MENEQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 23c"); 
                                                           //RESULT = new NodoOperacion(exI,tipoOp.menor_igual,exD);

                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 23b"); 
                                                             //   RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 23a"); 
								//RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= simple_exp RT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 23a"); 
								//RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= simple_exp AND simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 23a"); 
								//RESULT = new NodoOperacion(exI,tipoOp.and,exD);
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= simple_exp OR simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 23a"); 
								//RESULT = new NodoOperacion(exI,tipoOp.or,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // call_func ::= assign_stmt LPAREN args RPAREN SEMI 
            {
              NodoBase RESULT =null;
		int argumentosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argumentosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase argumentos = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 //if(modoDepuracion) System.out.println("\t regla 19b");  
                                                                                // RESULT = new NodoCallFunc(argumentos);
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_func",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // call_func ::= ID LPAREN args RPAREN SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int argumentosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argumentosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase argumentos = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//if(modoDepuracion) System.out.println("\t regla 19a"); 
                                                   // RESULT = new NodoCallFunc(variable,argumentos);
                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_func",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_stmt ::= RETURN ID SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		// if(modoDepuracion) System.out.println("\t regla 18"); 
                                           // RESULT = new NodoReturn(variable);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_stmt ::= FOR LPAREN assign_stmt SEMI exp SEMI assign_stmt RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int inicileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iniciright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase inici = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase com = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pasoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pasoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase paso = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //if(modoDepuracion) System.out.println("\t regla 17: Ciclo FOR"); 
                                                                                                          //RESULT = new NodoFor(inici,com,paso,cuerpo);
                                                                                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // write_stmt ::= WRITE exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 16"); 
					//RESULT= new NodoEscribir(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 15"); 
					//System.out.println("Leyendo Variable");
					//if(variable!=null)
					//RESULT = new NodoLeer(variable.toString());
					//else{
					//RESULT = null;
					//System.out.println("Ocurrio error en cup # 0002");
					//}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assign_stmt ::= ID LCOR NUM RCOR ASSIGN exp 
            {
              NodoBase RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vector = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer tam = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 14c");
                                                                  // if(vector!=null)
                                                                    //     RESULT = new NodoAsignacion(vector.toString(),tam,ex);
                                                                   //else{
                                                                    //        RESULT = null;
                                                                     //   System.out.println("Ocurrio error en asignacion a vector...");
                                                                      //  }
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assign_stmt ::= ID NT$0 ASSIGN exp 
            {
              NodoBase RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		// if(modoDepuracion) System.out.println("\t regla 14b parte final");
					//if(variable!=null)
					//RESULT = new NodoAsignacion(variable.toString(),ex);
					//else{
					//RESULT = null;
					//System.out.println("Ocurrio error en cup # 0001");
					//}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$0 ::= 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 //if(modoDepuracion) System.out.println("\t regla 14a parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		// if(modoDepuracion) System.out.println("\t regla 13"); 
							//RESULT = new NodoRepeat(cuerpo,prueba);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //if(modoDepuracion) System.out.println("\t regla 12b"); 
		//RESULT = new NodoIf(ex,pthen,pelse);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_stmt ::= IF exp THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //if(modoDepuracion) System.out.println("\t regla 12a"); 
		//RESULT = new NodoIf(ex,pthen);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= error 
            {
              NodoBase RESULT =null;
		 //if(modoDepuracion) System.out.println("\t regla 3f"); 
				//System.out.println("Ocurrio error en cup # 0004");
				//RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= call_func 
            {
              NodoBase RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase call = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 11h"); 
                                  //      RESULT=call;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= return_stmt 
            {
              NodoBase RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase re = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 11g"); 
                                  //      RESULT=re;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fr = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 11f"); 
                                       // RESULT=fr;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 11e"); 
				//	RESULT=sesc;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		// if(modoDepuracion) System.out.println("\t regla 11d"); 
				//	RESULT=slec;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 11c"); 
				//		RESULT=sasi;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		// if(modoDepuracion) System.out.println("\t regla 11b"); 
				//		RESULT=srep;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 11a"); 
				//	RESULT=sif;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		// if(modoDepuracion) System.out.println("\t regla 10b: Sentencias"); 
                                                   //RESULT=sent;				
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt_seq ::= stmt_seq SEMI stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		// if(modoDepuracion) System.out.println("\t regla 10a: Sentencia de secuencia, sentencias"); 
                                                   //NodoBase hijoActual = ini;
                                                   //if(hijoActual !=null){
						//	while(hijoActual.TieneHermano()){
						//		hijoActual = hijoActual.getHermanoDerecha();
						//	}
						//	hijoActual.setHermanoDerecha(sent);
						//	RESULT=ini;
                                                  // }else{
						//	RESULT=sent;
                                                 //  }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arg ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  //if(modoDepuracion) System.out.println("\t regla 7b"); 
                                       // RESULT = new NodoIdentificador(variable);
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arg ::= data_type ID 
            {
              NodoBase RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase dt = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 7a");  
                                        //RESULT = new NodoIdentificador(variable);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // args ::= arg 
            {
              NodoBase RESULT =null;
		int argumentoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase argumento = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 // if(modoDepuracion) System.out.println("\t regla 6b");  
                                                 //  RESULT = argumento;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // args ::= args COMA arg 
            {
              NodoBase RESULT =null;
		int argumentosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argumentosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase argumentos = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase argumento = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		// if(modoDepuracion) System.out.println("\t regla 6a");
                                                //NodoBase hijoActual = argumentos;
						//if(hijoActual !=null){
						//	while(hijoActual.TieneHermano()){
						//		hijoActual = hijoActual.getHermanoDerecha();
						//	}
						//	hijoActual.setHermanoDerecha(sent);
						//	RESULT=argumentos;
						//}else{
						//	RESULT=argumento;
						//}
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data_type ::= BOOLEAN 
            {
              NodoBase RESULT =null;
		 //if(modoDepuracion) System.out.println("\t regla 9b"); 
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // data_type ::= INT 
            {
              NodoBase RESULT =null;
		// if(modoDepuracion) System.out.println("\t regla 9a"); 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // another_type ::= data_type 
            {
              NodoBase RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dt = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //if(modoDepuracion) System.out.println("\t regla 8b");
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("another_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // another_type ::= VOID 
            {
              NodoBase RESULT =null;
		 // if(modoDepuracion) System.out.println("\t regla 8a"); 
                                
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("another_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= another_type ID LPAREN args RPAREN bloque 
            {
              NodoBase RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase at = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int argumentoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argumentoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase argumento = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		// if(modoDepuracion) System.out.println("\t regla 4");
                                                                                //RESULT = new NodoFuncion(variable,argumento,cuerpo);
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloque ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase stmt = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 // if(modoDepuracion) System.out.println("\t regla 5");  
                                       // RESULT = stmt;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= funcion 
            {
              NodoBase RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fn = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/* if(modoDepuracion) System.out.println("\t regla 3b"); 
						RESULT=fn;
                                    */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funciones ::= funciones funcion 
            {
              NodoBase RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase fn = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase f = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/* if(modoDepuracion) System.out.println("\t regla 3a");
                                        NodoBase hijoActual = fn;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=fn;
						}else{
							RESULT=f;
						}*/
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_full ::= funciones bloque 
            {
              NodoBase RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase fun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase blo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		// if(modoDepuracion) System.out.println("\t regla 2"); 
						//NodoBase hijoActual = fun;
						//if(hijoActual !=null){
						//	while(hijoActual.TieneHermano()){
						//		hijoActual = hijoActual.getHermanoDerecha();
						//	}
						//	hijoActual.setHermanoDerecha(blo);
						//	RESULT=fun;
					//	}else{
					//		RESULT=blo;
					//	}
					     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_full",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program_full 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*if(modoDepuracion) System.out.println("\t regla 1"); 
					ast = s;
					*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

